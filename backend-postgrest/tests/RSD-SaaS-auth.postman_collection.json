{
	"info": {
		"_postman_id": "cac10210-f65f-4bcd-a437-cfad2270c9b2",
		"name": "RSD-SaaS-auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "post account admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.variables.set(\"account_id\", pm.response.json()[0].id);",
							"pm.variables.set(\"jwt_user\", utils.jwt(\"rsd_user\", pm.variables.get(\"account_id\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/account",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "post account 2 admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.variables.set(\"account_id_2\", pm.response.json()[0].id);",
							"pm.variables.set(\"jwt_user_2\", utils.jwt(\"rsd_user\", pm.variables.get(\"account_id_2\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/account",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "post login_for_account admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"account\": \"{{account_id}}\",\n    \"provider\": \"my_provider\",\n    \"sub\": \"sub\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/login_for_account",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"login_for_account"
					]
				}
			},
			"response": []
		},
		{
			"name": "post login_for_account 2 admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"account\": \"{{account_id_2}}\",\n    \"provider\": \"my_provider\",\n    \"sub\": \"sub2\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/login_for_account",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"login_for_account"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user agreement false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.equal(\"false\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"account_id\": \"{{account_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/rpc/user_agreements_stored",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"rpc",
						"user_agreements_stored"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message permission denied\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.message).to.eql(\"permission denied for table software\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check content new software\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(4);",
							"\tpm.variables.set(\"id_unpublished\", jsonData.filter(sw => !sw.is_published)[0].id);",
							"\tpm.variables.set(\"id_published\", jsonData.filter(sw => sw.is_published)[0].id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"slug\": \"test-slug1\",\n\t\t\"brand_name\": \"Test software 1\",\n\t\t\"get_started_url\": \"https://www.example.com\",\n\t\t\"is_published\": true,\n\t\t\"short_statement\": \"Test software for testing\"\n\t},\n\t{\n\t\t\"slug\": \"test-slug2\",\n\t\t\"brand_name\": \"Test software 2\",\n\t\t\"get_started_url\": null,\n\t\t\"is_published\": true,\n\t\t\"short_statement\": \"Test software for testing\"\n\t},\n\t{\n\t\t\"slug\": \"test-slug3\",\n\t\t\"brand_name\": \"Test software 3\",\n\t\t\"get_started_url\": null,\n\t\t\"is_published\": true,\n\t\t\"short_statement\": \"Test software for testing\"\n\t},\n\t{\n\t\t\"slug\": \"test-slug-unpublished\",\n\t\t\"brand_name\": \"Test software unpublished\",\n\t\t\"get_started_url\": null,\n\t\t\"is_published\": false,\n\t\t\"short_statement\": \"Test software for testing\"\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software user not agreed ToS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"slug\": \"test-slug-user\",\n\t\"brand_name\": \"Test software user\",\n\t\"is_published\": true,\n\t\"short_statement\": \"Test software for testing\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch user accept terms user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"agree_terms\": true,\n    \"notice_privacy_statement\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/account?id=eq.{{account_id}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"account"
					],
					"query": [
						{
							"key": "id",
							"value": "eq.{{account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch user accept terms user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"agree_terms\": true,\n    \"notice_privacy_statement\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/account?id=eq.{{account_id_2}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"account"
					],
					"query": [
						{
							"key": "id",
							"value": "eq.{{account_id_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get user agreement true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.equal(\"true\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"account_id\": \"{{account_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/rpc/user_agreements_stored",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"rpc",
						"user_agreements_stored"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.variables.set(\"software_id_1\", pm.response.json()[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"slug\": \"test-slug-user\",\n\t\"brand_name\": \"Test software user\",\n\t\"is_published\": true,\n\t\"short_statement\": \"Test software for testing\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.variables.set(\"software_id_2\", pm.response.json()[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"slug\": \"test-slug-user-2\",\n\t\"brand_name\": \"Test software user\",\n\t\"is_published\": true,\n\t\"short_statement\": \"Test software for testing\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "get software anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"No unpublished software visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.filter(sw => !sw.is_published).length).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "get software user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Multiple software entries visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "get software admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Some unpublished software visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.filter(sw => !sw.is_published).length).to.eql(1);",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "post repo url anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message permission denied\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.message).to.eql(\"permission denied for table repository_url\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"software\" : \"{{id_published}}\",\n\t\"url\" : \"https://github.com/\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/repository_url",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"repository_url"
					]
				}
			},
			"response": []
		},
		{
			"name": "post repo url admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check content new repo urls\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"software\" : \"{{id_published}}\",\n\t\t\"url\" : \"https://github.com/\"\n\t},\n\t{\n\t\t\"software\" : \"{{id_unpublished}}\",\n\t\t\"url\" : \"https://github.com/\"\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/repository_url",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"repository_url"
					]
				}
			},
			"response": []
		},
		{
			"name": "get repo url anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"No unpublished repo url visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.filter(sw => !sw.is_published).length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/repository_url",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"repository_url"
					]
				}
			},
			"response": []
		},
		{
			"name": "get repo url admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"All repo url visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.filter(sw => !sw.is_published).length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/repository_url",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"repository_url"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software related admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check size response\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"origin\" : \"{{id_published}}\",\n\t\t\"relation\" : \"{{id_unpublished}}\"\n\t},\n\t{\n\t\t\"origin\" : \"{{id_unpublished}}\",\n\t\t\"relation\" : \"{{id_published}}\"\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software related user correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"origin\" : \"{{software_id_1}}\",\n\t\t\"relation\" : \"{{software_id_2}}\"\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					]
				}
			},
			"response": []
		},
		{
			"name": "get software related maintainer 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check relation visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software_for_software?origin=eq.{{software_id_1}}&relation=eq.{{software_id_2}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					],
					"query": [
						{
							"key": "origin",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "relation",
							"value": "eq.{{software_id_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get software related maintainer 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check relation visible\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software_for_software?origin=eq.{{software_id_1}}&relation=eq.{{software_id_2}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					],
					"query": [
						{
							"key": "origin",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "relation",
							"value": "eq.{{software_id_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get software related admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check content size\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software_for_software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					]
				}
			},
			"response": []
		},
		{
			"name": "get software related anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check no content\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software_for_software?or=(origin.eq.{{id_unpublished}},origin.eq.{{id_unpublished}})",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					],
					"query": [
						{
							"key": "or",
							"value": "(origin.eq.{{id_unpublished}},origin.eq.{{id_unpublished}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "post project user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"slug\": \"project-user-1\",\n\t\"is_published\": true,\n\t\"title\": \"Project 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/project",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"project"
					]
				}
			},
			"response": []
		},
		{
			"name": "get project maintainer user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Project has 1 maintainer\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/maintainer_for_project",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"maintainer_for_project"
					]
				}
			},
			"response": []
		},
		{
			"name": "post organisation admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});",
							"",
							"pm.variables.set(\"organisation_id_1\", pm.response.json()[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"eScience Center\",\n\t\"slug\" : \"nlesc\",\n\t\"website\": \"https://www.esciencecenter.nl/\",\n\t\"primary_maintainer\" : \"{{account_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "post maintainer of organisation wrong",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"maintainer\" : \"{{account_id_2}}\",\n\t\"organisation\" : \"{{organisation_id_1}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/maintainer_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"maintainer_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software organisation non maintainer wrong",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"software\" : \"{{software_id_1}}\",\n\t\"organisation\" : \"{{organisation_id_1}}\",\n\t\"status\" : \"approved\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software organisation non maintainer wrong 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"software\" : \"{{software_id_1}}\",\n\t\"organisation\" : \"{{organisation_id_1}}\",\n\t\"status\" : \"rejected_by_origin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software organisation relation maintainer of both",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"software\" : \"{{software_id_1}}\",\n\t\"organisation\" : \"{{organisation_id_1}}\",\n\t\"status\" : \"approved\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation reject status correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"rejected_by_origin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_1}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation rejected status wrong",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"rejected_by_relation\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_1}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation approve status correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"approved\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_1}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation rejected status correct 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"rejected_by_relation\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_1}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation rejected status wrong 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"rejected_by_origin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_1}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_1}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "post software organisation is_featured wrong",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"software\" : \"{{software_id_2}}\",\n\t\"organisation\" : \"{{organisation_id_1}}\",\n\t\"status\" : \"approved\",\n\t\"is_featured\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "post software organisation is_featured correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"\tpm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"software\" : \"{{software_id_2}}\",\n\t\"organisation\" : \"{{organisation_id_1}}\",\n\t\"status\" : \"approved\",\n\t\"is_featured\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation is_featured wrong",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"is_featured\" : true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_2}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_2}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation relation rejected wrong",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"rejected_by_relation\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_2}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_2}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch software organisation relation relation rejected correct 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_user_2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"status\" : \"rejected_by_origin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{backend_url}}/software_for_organisation?software=eq.{{software_id_2}}&organisation=eq.{{organisation_id_1}}",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					],
					"query": [
						{
							"key": "software",
							"value": "eq.{{software_id_2}}"
						},
						{
							"key": "organisation",
							"value": "eq.{{organisation_id_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete software organisation admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check deleted not empty\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software_for_organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete organisation admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check deleted not empty\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/organisation",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"organisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project maintainers admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check size deleted project maintainers\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/maintainer_for_project",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"maintainer_for_project"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check size deleted projects\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/project",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"project"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete software related admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check content size\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software_for_software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software_for_software"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete repo url anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/repository_url",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"repository_url"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete repo url admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check content deleted repo url\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/repository_url",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"repository_url"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete software anonymous",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message permission denied\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.message).to.eql(\"permission denied for table software\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete software maintainers admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check size deleted software maintainers\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/maintainer_for_software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"maintainer_for_software"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete software admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check size deleted software\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/software",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"software"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete all login_for_account admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check size deleted accounts\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/login_for_account",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"login_for_account"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete all accounts admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check size deleted accounts\", function () {",
							"\tconst jsonData = pm.response.json();",
							"\tpm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{backend_url}}/account",
					"host": [
						"{{backend_url}}"
					],
					"path": [
						"account"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_admin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({key: 'Prefer', value: 'return=representation'});",
					"",
					"// https://www.postman.com/postman/workspace/postman-team-collections/request/4630964-df7c0fff-babc-420d-ad45-e9e731d5c50f",
					"// JWT generation script adapted from",
					"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
					"",
					"",
					"function jwt(role, account) {",
					"\tvar jwtSecret = pm.globals.get('jwt_secret')",
					"",
					"\t// Set headers for JWT",
					"\tvar header = {",
					"\t\t'typ': 'JWT',",
					"\t\t'alg': 'HS256'",
					"\t};",
					"",
					"\t// Prepare timestamp in seconds",
					"\tvar currentTimestamp = Math.floor(Date.now() / 1000)",
					"",
					"\tvar data = {",
					"\t\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
					"\t\t'role': role,",
					"\t\t'account': account",
					"\t}",
					"",
					"",
					"\tfunction base64url(source) {",
					"\t\t// Encode in classical base64",
					"\t\tencodedSource = CryptoJS.enc.Base64.stringify(source)",
					"\t\t",
					"\t\t// Remove padding equal characters",
					"\t\tencodedSource = encodedSource.replace(/=+$/, '')",
					"\t\t",
					"\t\t// Replace characters according to base64url specifications",
					"\t\tencodedSource = encodedSource.replace(/\\+/g, '-')",
					"\t\tencodedSource = encodedSource.replace(/\\//g, '_')",
					"\t\t",
					"\t\treturn encodedSource",
					"\t}",
					"",
					"\t// encode header",
					"\tvar stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
					"\tvar encodedHeader = base64url(stringifiedHeader)",
					"",
					"\t// encode data",
					"\tvar stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
					"\tvar encodedData = base64url(stringifiedData)",
					"",
					"\t// build token",
					"\tvar token = `${encodedHeader}.${encodedData}`",
					"",
					"\t// sign token",
					"\tvar signature = CryptoJS.HmacSHA256(token, jwtSecret)",
					"\tsignature = base64url(signature)",
					"\tvar signedToken = `${token}.${signature}`",
					"",
					"\treturn signedToken",
					"}",
					"",
					"const rsd_admin = jwt(\"rsd_admin\");",
					"pm.variables.set(\"jwt_admin\", rsd_admin);",
					"",
					"utils = {",
					"\tjwt: (role, account) => jwt(role, account)",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}